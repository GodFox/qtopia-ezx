# 
# ***** BEGIN LICENSE BLOCK ***** 
# Version: RCSL 1.0/RPSL 1.0 
#  
# Portions Copyright (c) 1995-2002 RealNetworks, Inc. All Rights Reserved. 
#      
# The contents of this file, and the files included with this file, are 
# subject to the current version of the RealNetworks Public Source License 
# Version 1.0 (the "RPSL") available at 
# http://www.helixcommunity.org/content/rpsl unless you have licensed 
# the file under the RealNetworks Community Source License Version 1.0 
# (the "RCSL") available at http://www.helixcommunity.org/content/rcsl, 
# in which case the RCSL will apply. You may also obtain the license terms 
# directly from RealNetworks.  You may not use this file except in 
# compliance with the RPSL or, if you have a valid RCSL with RealNetworks 
# applicable to this file, the RCSL.  Please see the applicable RPSL or 
# RCSL for the rights, obligations and limitations governing use of the 
# contents of the file.  
#  
# This file is part of the Helix DNA Technology. RealNetworks is the 
# developer of the Original Code and owns the copyrights in the portions 
# it created. 
#  
# This file, and the files included with this file, is distributed and made 
# available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
# EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
# INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
# FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
# 
# Technology Compatibility Kit Test Suite(s) Location: 
#    http://www.helixcommunity.org/content/tck 
# 
# Contributor(s): 
#  
# ***** END LICENSE BLOCK ***** 
# 

import os

UmakefileVersion(2,2)

project.AddModuleLibraries("datatype/amr/common[amrcomlib]",
                           "common/dbgtool[debuglib]",
                           "common/runtime[runtlib]")

project.AddModuleIncludes("common/include",
                          "common/dbgtool/pub",
                          "common/runtime/pub",
                          "datatype/amr/common/pub",
                          "datatype/include",
                          "datatype/rm/include")

project.AddIncludes(GetSDKPath("amr_wb_src"))

project.AddSources("initguid.cpp",
		   "amr_wb_entry.cpp",
		   "amr_wb_codec.cpp")

if 'symbian-armi' in sysinfo.family_list or 'symbian-thumb' in sysinfo.family_list:
	project.symbianUtil.UseARMICompiler()
	project.AddLibraries(GetSDKPath("amrwb_lib"))
else:
	#IF2 is default for 3GPP AMR-WB SDK
	project.AddDefines('IF2')
	
	project.AddSources(os.path.join(GetSDKPath("amr_wb_src"), "dec_if.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "if_rom.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_main.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_dtx.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_rom.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_gain.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_util.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_acelp.c"),
			   os.path.join(GetSDKPath("amr_wb_src"), "dec_lpc.c"))

project.ExportFunction("RACreateDecoderInstance",
                       "const CLSID &clsid, IUnknown** ppUnknown")

project.SetDLLTypeCodec()
DLLTarget('amrw')

DependTarget()
