# 
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: linux-2.4-glibc23.cf,v 1.5 2006/07/06 19:28:06 jfinnecy Exp $ 
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  2.  Alternatively, the contents of this file may be used under the 
#  terms of the GNU General Public License Version 2 (the 
#  "GPL") in which case the provisions of the GPL are applicable 
#  instead of those above.  Please note that RealNetworks and its  
#  licensors disclaim any implied patent license under the GPL.   
#  If you wish to allow use of your version of this file only under  
#  the terms of the GPL, and not to allow others 
#  to use your version of this file under the terms of either the RPSL 
#  or RCSL, indicate your decision by deleting Paragraph 1 above 
#  and replace them with the notice and other provisions required by 
#  the GPL. If you do not delete Paragraph 1 above, a recipient may 
#  use your version of this file under the terms of any one of the 
#  RPSL, the RCSL or the GPL. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Linux 2.4 using GCC/G++ 3.3 and glibc-2.3."""

## This should be cleaned up, it sets -mcpu=pentium -- TDM
exec_config_file('linux-2.2-libc6-gcc32.cf')

## list of PCF files to run
platform.pcf_prefix_list = ["unix", "linux2", "linux-2.4-glibc23"]


## Turn off exceptions and rtti.  Set warning options.
platform.cxx.args["default"] = platform.cxx.args["default"] + " " + \
    "-Winline -Wdisabled-optimization " + \
    "-Wno-unused-parameter -Wno-reorder " + \
    "-fmessage-length=0 "

platform.cc.args["default"] = platform.cc.args["default"] + " " + \
    "-Winline -Wdisabled-optimization " + \
    "-Wno-unused-parameter -Wreturn-type " + \
    "-fmessage-length=0 "


# Link using g++ for proper handling of C++
class LinuxGPlusPlusLinker(LinuxLinker):

    def LinkDLL(self, target_path, objects, static_libs, dynamic_libs):
        cmd_list = []

        ## XXX: Link the server's runtime library into plugins
        ## mess --> move to new API:
        ##   project.AddDLLStaticLibraries()
        ## A module can set project.NoServruntime=1 if it doesn't
        ## want to link in the runtime library.
        servruntime_path = ""

        armerge_cmd = os.path.join(BUILD_ROOT, "bin", "armerge.py")
        tmp_path = self.armerge_tmp_path()
        libpath = self.armerge_lib_path()
        cmd = "python %s -d %s %s %s %s" % (
            armerge_cmd, tmp_path, libpath, static_libs, servruntime_path)
        cmd_list.append(cmd)

        lspath = self.link_script_path()
        self.write_link_script(lspath)
        if project.exported_func:
            undefinedSymbols="-u "+string.join(project.exported_func," -u ")
        else:
            undefinedSymbols=""

        cmd = "g++ -shared %s -o %s %s %s %s %s %s" % (
            lspath, target_path,
            undefinedSymbols,
            objects, libpath,
            self.link_paths(), dynamic_libs)
        cmd_list.append(cmd)

        cmd = "rm %s" % (libpath)
        cmd_list.append(cmd)

        return cmd_list

    def LinkEXE(self, target_path, objects, static_libs, dynamic_libs):
        cmd_list = []

        armerge_cmd = os.path.join(BUILD_ROOT, "bin", "armerge.py")
        tmp_path = self.armerge_tmp_path()
        libpath = self.armerge_lib_path()
        cmd = "python %s -d %s %s %s" % (armerge_cmd, tmp_path, libpath, static_libs)
        cmd_list.append(cmd)

        cmd = "g++ -Wl,-export-dynamic -o %s %s %s %s %s" % (
            target_path, objects, libpath, self.link_paths(), dynamic_libs)
        cmd_list.append(cmd)

        cmd = "rm %s" % (libpath)
        cmd_list.append(cmd)

        return cmd_list
    
platform.link = LinuxGPlusPlusLinker()




