# 
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: aix-4.2-powerpc.cf,v 1.4 2006/06/19 23:11:34 jfinnecy Exp $ 
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  2.  Alternatively, the contents of this file may be used under the 
#  terms of the GNU General Public License Version 2 (the 
#  "GPL") in which case the provisions of the GPL are applicable 
#  instead of those above.  Please note that RealNetworks and its  
#  licensors disclaim any implied patent license under the GPL.   
#  If you wish to allow use of your version of this file only under  
#  the terms of the GPL, and not to allow others 
#  to use your version of this file under the terms of either the RPSL 
#  or RCSL, indicate your decision by deleting Paragraph 1 above 
#  and replace them with the notice and other provisions required by 
#  the GPL. If you do not delete Paragraph 1 above, a recipient may 
#  use your version of this file under the terms of any one of the 
#  RPSL, the RCSL or the GPL. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""AIX 4.2.x and VisualAge C++ 3.6.4 on PowerPC."""

exec_config_file('unix.cf')

## list of PCF files to run
platform.pcf_prefix_list = ['unix', 'aix4', 'aix-4.2']

## defines
project.AddDefines("_AIX", "_AIX42", "_BIG_ENDIAN", "_STRICT_ALIGNMENT")
    
## don't override FD_SETSIZE
for define in project.defines:
    if define[:10] == 'FD_SETSIZE':
        project.defines.remove(define)
        break

make_toc = platform.make_toc
make_toc.cmd = 'ranlib'
make_toc.make_var = 'RANLIB'
make_lib = platform.make_lib
make_lib.cmd = 'ar crl'
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'
platform.copy.cmd = 'cp -f'
platform.shared_object_suffix = 'o'
platform.suffix_list = ['.cpp', '.o']

platform.cc = cc = Compiler()
cc.cmd = 'cc'
# NOTE: I removed the optimization flag (level 1)
cc.args['default'] = '-qchars=signed -qcpluscmt' 
cc.args['release'] = ''
cc.args['debug'] = '-g -DDEBUG -D_DEBUG -qfullpath' 
cc.args['dll'] = ''
cc.args['lib'] = ''
cc.define_arg = '-D'
cc.include_arg = '-I'
cc.source_arg = '-c'
cc.target_arg = '-o'
cc.make_var = 'CC'
cc.make_flags = 'CCFLAGS'

platform.cxx = cxx = Compiler()
cxx.cmd = 'xlC'
cxx.args['default'] = '-qchars=signed -D_NO_SETENV -qlanglvl=noansifor ' 
cxx.args['debug'] = '-g -DDEBUG -D_DEBUG -qfullpath' 
cxx.args['release'] = ''
cxx.args['dll'] = ''
cxx.args['lib'] = ''
cxx.define_arg = '-D'
cxx.include_arg = '-I'
cxx.source_arg = '-c'
cxx.target_arg = '-o'
cxx.make_var = 'CXX'
cxx.make_flags = 'CXXFLAGS'


## define AIX linker
class xlCLinker(Linker):
    def __init__(self):
        Linker.__init__(self)
        self.make_var = 'LD'
        self.make_flags = 'LDFLAGS'
        self.args['static'] = '-static'
        self.target_arg = '-o'
        self.system_paths = ""

        
    ## static_libs and dynamic libs are not handled properly right now
    def execute(self, target, objects, static_libs, dynamic_libs):

        ## DLL's must have some exported symbols 
        if project.getTargetType() == "dll" and \
           len(project.exported_func) == 0:
            umake_lib.fatal(
                "no exported symbols for target %s" % (project.target_name)) 

        ## create the exported symbol file for DLL and EXE targets 
        if project.getTargetType() in ["dll", "exe"] and \
           len(project.exported_func) > 0:
            exp_file = '%s.exp' % (project.target_name)
            fil = open(exp_file, 'w')
            for current_obj in project.exported_func:
                fil.write('%s\n' % (current_obj))

        if project.getTargetType() == "dll":
            link_str = '%s %s %s %s %s %s %s -E%s -ldl' % (
                platform.form_var(self.make_var),
                platform.form_var(self.make_flags),
                self.target_arg,
                target,
                objects,
                dynamic_libs,
                static_libs,
                exp_file)

        elif project.getTargetType() == "exe":
            if len(project.exported_func) > 0:
                exports_option = "-brtl -bE:%s" % (exp_file)
            else:
                exports_option = ""

            link_str = form_string(
                platform.form_var(self.make_var),
                platform.form_var(self.make_flags),
                self.target_arg,
                target,
                exports_option,
                objects,
                dynamic_libs,
                static_libs)

        return link_str


    def set_type(self):
        for item in project.system_paths:
            self.system_paths = '%s %s' % (self.system_paths, item)
                    
        if project.getTargetType() != 'dll':
            self.cmd = 'xlC '
            self.args['default'] = self.system_paths 
        else:
            self.cmd = 'makeC++SharedLib'
            self.args['default'] = '-p0 -G ' + self.system_paths
platform.link = xlCLinker()
