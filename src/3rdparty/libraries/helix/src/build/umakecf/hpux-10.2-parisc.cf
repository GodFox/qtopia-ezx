# 
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: hpux-10.2-parisc.cf,v 1.5 2006/06/19 23:11:34 jfinnecy Exp $ 
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  2.  Alternatively, the contents of this file may be used under the 
#  terms of the GNU General Public License Version 2 (the 
#  "GPL") in which case the provisions of the GPL are applicable 
#  instead of those above.  Please note that RealNetworks and its  
#  licensors disclaim any implied patent license under the GPL.   
#  If you wish to allow use of your version of this file only under  
#  the terms of the GPL, and not to allow others 
#  to use your version of this file under the terms of either the RPSL 
#  or RCSL, indicate your decision by deleting Paragraph 1 above 
#  and replace them with the notice and other provisions required by 
#  the GPL. If you do not delete Paragraph 1 above, a recipient may 
#  use your version of this file under the terms of any one of the 
#  RPSL, the RCSL or the GPL. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
## $Id: hpux-10.2-parisc.cf,v 1.5 2006/06/19 23:11:34 jfinnecy Exp $
## HP/UX 11.0 using native compiler
exec_config_file('unix.cf')

## list of PCF files to run
platform.pcf_prefix_list = ['unix', 'hp-uxB']

## defines
project.AddDefines("_HPUX")
project.AddDefines("_NO_SETENV")
project.AddDefines("_REENTRANT")
project.AddDefines("_STRICT_ALIGNMENT")
project.AddDefines("__inline=inline")

## HP/UX defines _BIG_ENDIAN in its header files, so keep this
## commented out
## project.AddDefines("_BIG_ENDIAN")

## Turn on Threaded Network IO 
project.AddDefines('_UNIX_THREADED_NETWORK_IO')

## This define enables compiling of the UnixThreads file.
## It means that that platform has a working threads lib
## that does everything we need.
project.AddDefines('_UNIX_THREADS_SUPPORTED')

## compiler
platform.cc = Compiler()
platform.cxx = Compiler()

cc = platform.cc
cc.cmd = '/bin/c89'
cc.args['default'] = '+Z -z -w +inline_level3 -Wp,-H,30000 +DA1.1 +DS2.0'
cc.args['debug'] = '+Oinfo -g -DDEBUG -D_DEBUG +W925 -H30000'
cc.args['release'] = '+O2'
cc.args['exe'] = ''
cc.source_arg = '-c'
cc.define_arg = '-D'
cc.include_arg = '-I'
cc.source_arg = '-c'
cc.target_arg = '-o '
cc.make_var = 'CC'
cc.make_flags = 'CCFLAGS'

cxx = platform.cxx
cxx.cmd = '/opt/aCC/bin/aCC'
cxx.args['default'] = '+Z -z -w +DA1.1 +DS2.0'
cxx.args['release'] = '+O2'
cxx.args['debug'] = '+Oinfo +Onoinline -g0 +d -DDEBUG -D_DEBUG +W925'
cxx.args['exe'] = ''
cxx.define_arg = '-D'
cxx.include_arg = '-I'
cxx.source_arg = '-c'
cxx.target_arg = '-o '
cxx.make_var = 'CXX'
cxx.make_flags = 'CXXFLAGS'

## compile assembly files
platform.build_rules[".s"] = BuildRule(".s", ".o", platform.cc)

make_toc = platform.make_toc
make_toc.cmd = 'ranlib'
make_toc.make_var = 'RANLIB'

make_lib = platform.make_lib
make_lib.cmd = '/usr/ccs/bin/ar cr '
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'

class GXXLinker(Linker):
        def __init__(self):
                Linker.__init__(self)
                self.make_var = 'LD'
                self.make_flags = 'LDFLAGS'
                self.args['default'] = '-L' + \
                                       os.path.join(platform.x_root_dir, 'lib')
                self.args['profile'] = '-G'
                self.args['static'] = ''
                self.args['debug'] = '-g0'
                self.args['release'] = '-s'
                self.target_arg = '-o'
                self.ldcmd = 'aCC'
                self.ldargs = '+DA1.1'
                self.system_paths = ""
        def execute(self, target, objects, static_libs, dynamic_libs):
                if (project.getTargetType() != 'dll'):
                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + ' ' + target + ' ' + \
                                   objects + ' ' + dynamic_libs + ' ' + \
                                   static_libs + \
                                   ' -ldld '
                else:
                        if project.getTargetType() == "dll" and \
                                len(project.exported_func) == 0:
                                umake_lib.fatal("no exported symbols for target %s" % (project.target_name))
                        project.exported_func.append("_shlInit")
                        project.exported_func.append("__shlInit")
                        project.exported_func.append("__shlinit")
                        project.exported_func.append("noshlibs")

                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + ' ' + target + ' ' + \
                                   objects + ' ' + dynamic_libs + \
                                   static_libs
                                   #string.join(map(lambda x: " -Wl,+e" + x, project.exported_func)) + " " + \
                return link_str
        def set_type(self):
                ## in order to specify non-system library paths use the
                ## project.system_paths list
                for item in project.system_paths:
                    self.system_paths = self.system_paths + ' ' + item
                if (project.getTargetType() != 'dll'):
                        self.cmd = 'aCC'
                        self.args['default'] = self.ldargs + ' ' + self.system_paths
                else:
                        self.cmd = self.ldcmd
                        self.args['default'] = self.ldargs + ' -b -Wl,-Bsymbolic ' \
                                               + self.system_paths

platform.link = GXXLinker()


