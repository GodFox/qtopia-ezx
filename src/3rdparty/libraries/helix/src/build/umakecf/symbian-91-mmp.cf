# -*- python -*-
#
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: symbian-91-mmp.cf,v 1.3 2006/09/21 19:00:12 damann Exp $
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  2.  Alternatively, the contents of this file may be used under the 
#  terms of the GNU General Public License Version 2 (the 
#  "GPL") in which case the provisions of the GPL are applicable 
#  instead of those above.  Please note that RealNetworks and its  
#  licensors disclaim any implied patent license under the GPL.   
#  If you wish to allow use of your version of this file only under  
#  the terms of the GPL, and not to allow others 
#  to use your version of this file under the terms of either the RPSL 
#  or RCSL, indicate your decision by deleting Paragraph 1 above 
#  and replace them with the notice and other provisions required by 
#  the GPL. If you do not delete Paragraph 1 above, a recipient may 
#  use your version of this file under the terms of any one of the 
#  RPSL, the RCSL or the GPL. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
#  Contributor(s):  
#  
#  ***** END LICENSE BLOCK ***** 
#
"""Creating symbian build files (bld.inf, MMPs, and deffiles) with the symbian 9.1 sdk"""


project.AddDefines('HELIX_CONFIG_SYMBIAN_GENERATE_MMP')

exec_config_file('symbian-armv5.cf')
exec_config_file('symbian-emulator-winscw.cf')

exec_config_file('symbian-91.cf')
exec_config_file('symbian.cf')

##
##  Hack to get around core build system requirements
##  These values will not be used
##
platform.cc  = Compiler()
platform.cxx = Compiler()
platform.asm = Compiler()
platform.build_rules['.s'] = BuildRule('.s', '.obj', platform.asm)


class SymbianMmpUtils:

    def __init__(self):

        self.system_includes = []
        self.vendorID = 'VID_DEFAULT'
        self.armv5CompilerOptions = ''
        self.winscwCompilerOptions = ''
        self.rsc_target_dir = ''
        self.exports = []

        self.armv5CompOptions  = 'ARMCC '
        self.winscwCompOptions = 'CW '

        self.armv5Defines  = GetArmv5ExtraDefines()
        self.winscwDefines = GetWinscwExtraDefines()

        self.armv5Sources  = []
        self.winscwSources = []

        self.armv5Libraries  = []
        self.winscwLibraries = []

        self.mmpCfgExports = []

        self.armv5ExportedFunc = []
        self.winscwExportedFunc = []

        self.platformExclusion = []

        ##
        ##  We need the system includes defined by armv5, winscw,
        ##  and defines used by individual modules
        ##
        self.systemIncludes       = GetSystemIncludePaths()
        self.armv5SystemIncludes  = GetArmv5SystemIncludes()
        self.winscwSystemIncludes = GetWinscwSystemIncludes()

    def rmlist(list1, list2):
        ##
        ##  Removes items in list2 from list1, case insensitive
        ##
        tmp={}
        for item in list2:
            tmp[string.lower(item)]=1

        lst = []
        for item in list1:
            if not tmp.get(string.lower(item)):
                lst.append(item)

        return lst

    def AddSystemIncludes(self, *args):
        self.systemIncludes = self.systemIncludes + umake_lib.listify(args)

    def RemoveSystemIncludes(self, *args):
        self.systemIncludes = rmlist(self.systemIncludes, umake_lib.listify(args))

    def AddArmv5Defines(self, *args):
        self.armv5Defines = self.armv5Defines + umake_lib.listify(args)

    def AddWinscwDefines(self, *args):
        self.winscwDefines = self.winscwDefines + umake_lib.listify(args)

    def AddArmv5Sources(self, *args):
        self.armv5Sources.extend(umake_lib.listify(args))

    def AddWinscwSources(self, *args):
        self.winscwSources.extend(umake_lib.listify(args))

    def AddArmv5Libraries(self, *args):
        self.armv5Libraries.extend(umake_lib.listify(args))

    def GetArmv5Libraries(self):
        libs = []
        for lib in self.armv5Libraries:
            libs.append( umake_lib.fix_library_path(platform, project, lib ) )
        return libs

    def AddWinscwLibraries(self, *args):
        self.winscwLibraries.extend(umake_lib.listify(args))

    def GetWinscwLibraries(self):
        libs = []
        for lib in self.winscwLibraries:
            libs.append( umake_lib.fix_library_path(platform, project, lib ) )
        return libs

    def AddMmpCfgExport(self, *args):
        self.mmpCfgExports.extend(umake_lib.listify(args))

    def ExportWinscwFunction(self, name, proto, include_path = None, include = None):
        self.winscwExportedFunc.append(name)

    def ExportArmv5Function(self, name, proto, include_path = None, include = None):
        self.armv5ExportedFunc.append(name)

    def AddPrjPlatformExclusion(self, *args):
        self.platformExclusion.extend(umake_lib.listify(args))

## 
##  Create a global instance to use
##
project.symbianMmpUtils = SymbianMmpUtils()

def HandleSymbianStuff(args):
    ##
    ## Generate the DLL stubs if we need to
    ##
    if project.getTargetType() == "dll":
        ##
        ##  Generate the ordinal information and file
        ##
        ordinalInfo = project.PlatSecUtils.generate_ordinal_info()
        project.symbianUtil.generate_ordinal_file(ordinalInfo)

        ##
        ##  Create the dll stub file
        ##
        project.PlatSecUtils.generate_dll_stub_code( ordinalInfo,
                                                     project.symbianMmpUtils.armv5ExportedFunc,
                                                     project.symbianMmpUtils.winscwExportedFunc)

        ##
        ##  Generate the armv5 and winscw deffiles 
        ##
        def_file = "%s_armv5.def" % project.target_name
        WriteArmv5Deffile(def_file, project.symbianMmpUtils.armv5ExportedFunc)

        def_file = "%s_winscw.def" % project.target_name
        WriteWinscwDeffile(def_file, project.symbianMmpUtils.winscwExportedFunc)
  
    ## 
    ##   Get the compiler options for each platform
    ## 
    project.symbianMmpUtils.armv5CompOptions  += GetArmv5CommonCompilerOptions()
    project.symbianMmpUtils.winscwCompOptions += GetWinscwCommonCompilerOptions()

AddUmakeCallback( HandleSymbianStuff, None )
