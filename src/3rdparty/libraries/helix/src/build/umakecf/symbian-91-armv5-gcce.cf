# -*- python -*-
#
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: symbian-91-armv5-gcce.cf,v 1.2 2007/04/05 05:02:14 gahluwalia Exp $ 
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  2.  Alternatively, the contents of this file may be used under the 
#  terms of the GNU General Public License Version 2 (the 
#  "GPL") in which case the provisions of the GPL are applicable 
#  instead of those above.  Please note that RealNetworks and its  
#  licensors disclaim any implied patent license under the GPL.   
#  If you wish to allow use of your version of this file only under  
#  the terms of the GPL, and not to allow others 
#  to use your version of this file under the terms of either the RPSL 
#  or RCSL, indicate your decision by deleting Paragraph 1 above 
#  and replace them with the notice and other provisions required by 
#  the GPL. If you do not delete Paragraph 1 above, a recipient may 
#  use your version of this file under the terms of any one of the 
#  RPSL, the RCSL or the GPL. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
#

exec_config_file('symbian-91.cf')
exec_config_file('symbian-armv5-gcce.cf')

project.AddDefines('HELIX_CONFIG_SYMBIAN_GENERATE_MMP')
project.RemoveDefines('HELIX_FEATURE_NOINLINE')

class PlatformDependentUtils:
    def __init__(self):
        self.uid1 = 0
        self.uid2 = 0x100039ce
        self.uid3 = 0
        self.priority = 0
        self.cap0 = 0x0003fffe
        self.cap = 0x00000000
        self.sid = 0x00000000
        self.vid = 0
        self.ver = 0x00010000
        self.flags = 0
		
    def create_mbm_file(self, mbmpath, headerpath, options, option, imagelist, iconlist):
        i = 0
        bitmaps = [] 
        for image in iconlist:
            bitmaps.append("%s%s " % (options[i], image) )
            i = i + 1
        for image in imagelist:
            bitmaps.append("%s%s " % (option, image))

        cmd = "bmconv /h%s %s %s" % (headerpath, mbmpath, string.join(bitmaps))
        (status, output) = shell.run(cmd)
        print output

        if status:
            raise "*** mbm generation failed (%s) ***" % status
    
    def write_uid_file(self):
        # first uid (what kind of binary image)
        KDynamicLibraryUid  = 0x10000079
        KExecutableImageUid = 0x1000007a

        # second uid (what kind of dll or exe)
        KUidApp             = 0x100039ce
        KUidRecognizer      = 0x10003a19

        # third uid = implementation uid

        #
        # for symbian, target_type is 'exe' for .app and .mdl and .mmf (misleading)
        #
        imageType = "unknown"
        if( project.getTargetType() == "dll" ):
            imageType = "dll"

        elif ( project.getTargetType() == "exe" ):
            if (project.BuildOption('make-app') or project.BuildOption('make-mdl') or project.BuildOption('make-mmf')):
                imageType = "dll"
            else:
                imageType = "exe"

        if( project.symbianUtil.uid1 == 0 ):
            # set to default value for target type
            if (imageType == "exe"):
                project.symbianUtil.uid1 = KExecutableImageUid
            elif (imageType == "dll"):
                project.symbianUtil.uid1 = KDynamicLibraryUid
                
        if( project.symbianUtil.uid2 == 0 ):
            # set to default value for specific type of target
            if (project.BuildOption('make-app') or project.BuildOption('make-exe')):
                # app-exe
                project.symbianUtil.uid2 = KUidApp
            elif (project.BuildOption('make-mdl')):
                # recognizer
                project.symbianUtil.uid2 = KUidRecognizer

        if (not project.IsDefined('_GCCE_')):
            uidpath = '%s.uid.cpp' %( project.target_name)

            fil = open(uidpath, 'w')
            fil.write('//Umake generated UID file.\n')
            fil.write('#include <E32STD.H>\n')
            fil.write('#include <E32CONS.H>\n')
            fil.write('#pragma data_seg(".E32_UID")\n')
            tmp = '__EMULATOR_IMAGE_HEADER(0x%x, 0x%x, 0x%x, %s, 0x%x, 0x%x)\n' % (
                                            project.symbianUtil.uid1,
                                            project.symbianUtil.uid2,
                                            project.symbianUtil.uid3,
                                            'EPriorityLow',
                                            self.cap,
                                            self.flags)
            fil.write(tmp)
            fil.write('#pragma data_seg()\n')
            fil.close()

            project.AddSources(uidpath)


class SymbianMmpUtils:

    def __init__(self):
	self.armv5Defines  = GetArmv5ExtraDefines()      
		
    def AddArmv5Sources(self, *args):
        project.AddSources(umake_lib.listify(args))
	
    def AddWinscwSources(self, *args):
        dummy = "dummy"
		
    def AddArmv5Libraries(self, *args):
        project.AddLibraries(umake_lib.listify(args))
		
    def AddArmv5Defines(self, *args):
	project.AddDefines(umake_lib.listify(args))
	
    def ExportWinscwFunction(self, name, proto, include_path = None, include = None):
        dummy = "dummy"    
		
    def AddWinscwLibraries(self, *args):	
	dummy = "dummy"
		
## Create a global instance to use.
project.PlatformDependentUtil = PlatformDependentUtils()
project.symbianMmpUtils = SymbianMmpUtils()


project.AddDefines('HELIX_CONFIG_SYMBIAN_SAMPLESPLAYED','HELIX_CONFIG_OPTIMIZE_DLL_LOADING', 'HELIX_FEATURE_RMFF_MULTIRATE')
project.RemoveDefines('HELIX_FEATURE_AUDIO_CODEC_SIPRO')