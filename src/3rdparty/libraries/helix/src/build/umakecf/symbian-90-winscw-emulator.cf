# -*- python -*-
#
#  ***** BEGIN LICENSE BLOCK *****  
#   
#  Source last modified: $Id: symbian-90-winscw-emulator.cf,v 1.3 2006/06/19 23:11:34 jfinnecy Exp $  
#   
#  Copyright Notices: 
#   
#  Portions Copyright (c) 1995-2006 RealNetworks, Inc. All Rights Reserved. 
#   
#  Patent Notices: This file may contain technology protected by one or  
#  more of the patents listed at www.helixcommunity.org 
#   
#  1.   The contents of this file, and the files included with this file, 
#  are protected by copyright controlled by RealNetworks and its  
#  licensors, and made available by RealNetworks subject to the current  
#  version of the RealNetworks Public Source License (the "RPSL")  
#  available at  * http://www.helixcommunity.org/content/rpsl unless  
#  you have licensed the file under the current version of the  
#  RealNetworks Community Source License (the "RCSL") available at 
#  http://www.helixcommunity.org/content/rcsl, in which case the RCSL 
#  will apply.  You may also obtain the license terms directly from 
#  RealNetworks.  You may not use this file except in compliance with 
#  the RPSL or, if you have a valid RCSL with RealNetworks applicable 
#  to this file, the RCSL.  Please see the applicable RPSL or RCSL for 
#  the rights, obligations and limitations governing use of the 
#  contents of the file. 
#   
#  This file is part of the Helix DNA Technology.  RealNetworks is the 
#  developer of the Original Code and owns the copyrights in the 
#  portions it created.   Copying, including reproducing, storing,  
#  adapting or translating, any or all of this material other than  
#  pursuant to the license terms referred to above requires the prior  
#  written consent of RealNetworks and its licensors 
#   
#  This file, and the files included with this file, is distributed 
#  and made available by RealNetworks on an 'AS IS' basis, WITHOUT  
#  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS  
#  AND ITS LICENSORS HEREBY DISCLAIM  ALL SUCH WARRANTIES, INCLUDING  
#  WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS  
#  FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. 
#   
#  Technology Compatibility Kit Test Suite(s) Location:  
#     http://www.helixcommunity.org/content/tck 
#   
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Building with the symbian 9.0 sdk for the winscw emulator on win-i386 """

## Read in generic symbian config file.
exec_config_file('symbian-90.cf')
exec_config_file('symbian-emulator-winscw.cf')

class PlatformDependentUtils:
    def __init__(self):
        self.uid1 = 0
        self.uid2 = 0
        self.uid3 = 0

    def write_uid_file(self):
        # first uid (what kind of binary image)
        KDynamicLibraryUid  = 0x10000079
        KExecutableImageUid = 0x1000007a

        # second uid (what kind of dll or exe)
        KUidApp             = 0x100039ce
        KUidRecognizer      = 0x10003a19

        # third uid = implementation uid

        #
        # for symbian, target_type is 'exe' for .app and .mdl and .mmf (misleading)
        #
        imageType = "unknown"
        if( project.getTargetType() == "dll" ):
            imageType = "dll"

        elif ( project.getTargetType() == "exe" ):
            # We have no longer make-app as dll 
            if (project.BuildOption('make-mdl') or project.BuildOption('make-mmf')):
                imageType = "dll"
            else:
                imageType = "exe"

        if( self.uid1 == 0 ):
            # set to default value for target type
            if (imageType == "exe"):
                self.uid1 = KExecutableImageUid
            elif (imageType == "dll"):
                self.uid1 = KDynamicLibraryUid
                
        if( self.uid2 == 0 ):
            # set to default value for specific type of target
            if (project.BuildOption('make-app')):
                # app
                self.uid2 = KUidApp
            elif (project.BuildOption('make-mdl')):
                # recognizer
                self.uid2 = KUidRecognizer

        uidpath = '%s.uid.cpp' %( project.target_name)

        fil = open(uidpath, 'w')
        fil.write('//Umake generated UID file.\n')
        fil.write('#include <e32cmn.h>\n')
        fil.write('#pragma data_seg(".SYMBIAN")\n')
        #      __EMULATOR_IMAGE_HEADER2(aUid0,aUid1,aUid2,    aPriority           ,aCap0,      aCap1,    aSid,  aVid,          aVer,  aFlags)	
        tmp = '__EMULATOR_IMAGE_HEADER2(0x%x, 0x%x, 0x%x, EPriorityForeground, 0x000ffffeu, 0x00000000u, 0x%x, 0x00000000u, 0x00010000, 0)\n' % (self.uid1,
                                            self.uid2, self.uid3, self.uid3)   
        fil.write(tmp)
        fil.write('#pragma data_seg()\n')
        fil.close()

        project.AddSources(uidpath)

    def generate_ordinal_info(self):
        # Add info for the symbol to ordinal function.
        # It should always have ordinal 1 assigned to it
        info = [(1, "GetSymbolOrdinal"), (2, "FreeGlobal")]

        # Assign ordinals to the exported functions
        ordinal = 3
        for func in project.exported_func:
            info.append((ordinal, func))
            ordinal = ordinal + 1

        return info

    def create_mbm_file(self, mbmpath, headerpath, options, option, imagelist, iconlist):
        i = 0
        bitmaps = [] 
        for image in iconlist:
            bitmaps.append("%s%s " % (options[i], image) )
            i = i + 1
        for image in imagelist:
            bitmaps.append("%s%s " % (option, image))

        cmd = "bmconv /h%s %s %s" % (headerpath, mbmpath, string.join(bitmaps))
        (status, output) = shell.run(cmd)
        print output

        if status:
            raise "*** mbm generation failed (%s) ***" % status

    def generate_dll_stub_code(self, ordinalInfo):
        stubSourceName = "%s_dll_stub.c" % project.target_name

        # find ordinal 1's function name
        symbol2OrdinalFunc = "GetSymbolOrdinal"
        symbol2XOrdinalFunc = "FreeGlobal"

        dllStub = open(stubSourceName, "w")
        dllStub.write("#include <e32std.h>\n")
        dllStub.write("#include <string.h>\n")
        if(not project.IsDefined('HELIX_CONFIG_MICROCORE_DLL_STUB')):
                dllStub.write("#include \"hxglobalmgr.h\"\n")
        
        dllStub.write("struct SymbolEntry {\n")
        dllStub.write("    const char* m_pSymbolName;\n")
        dllStub.write("    int m_ordinal;\n")
        dllStub.write("};\n")
        dllStub.write("\n")
        dllStub.write("static const struct SymbolEntry z_symbolTable[] = {\n")
        dllStub.write("    {\"%s\", %d}" % (ordinalInfo[0][1], ordinalInfo[0][0]))

        for x in ordinalInfo[1:] :
            dllStub.write(",\n")
            dllStub.write("    {\"%s\", %d}" % (x[1], x[0]))

        dllStub.write("\n};\n")
        dllStub.write("\n")
        dllStub.write("extern \"C\"\n")

        if(project.IsDefined('HELIX_CONFIG_MICROCORE_DLL_STUB')):
            dllStub.write("int %s(const SymbolEntry*& pMap, int& magic)\n" % symbol2OrdinalFunc)
            dllStub.write("{\n")
            dllStub.write("    magic = 0x23aaff42;\n")
            dllStub.write("    pMap = z_symbolTable;\n")
            dllStub.write("    return sizeof(z_symbolTable) / sizeof(SymbolEntry);\n")
            dllStub.write("}\n")
        else:
            dllStub.write("int %s(const char* pSymbolName)\n" % symbol2OrdinalFunc)
            dllStub.write("{\n")
            dllStub.write("    int ret = 0;\n")
            dllStub.write("    int numSymbols = sizeof(z_symbolTable) / sizeof(struct SymbolEntry);\n")
            dllStub.write("    int i;\n")
            dllStub.write("    if( NULL != pSymbolName )\n")
            dllStub.write("    {\n")
            dllStub.write("       for(i = 0; !ret && (i < numSymbols); i++)\n")
            dllStub.write("       {\n")
            dllStub.write("           if (!strcmp(pSymbolName, z_symbolTable[i].m_pSymbolName))\n")
            dllStub.write("           {\n");
            dllStub.write("               ret = z_symbolTable[i].m_ordinal;\n")
            dllStub.write("               break;\n")
            dllStub.write("           }\n")
            dllStub.write("       }\n")
            dllStub.write("    }\n")
            dllStub.write("    return ret;\n")
            dllStub.write("}\n")

        dllStub.write("\n")
        dllStub.write("extern \"C\"\n")
        if project.IsDefined('HELIX_CONFIG_MICROCORE_DLL_STUB'):
            dllStub.write("int %s(const SymbolEntry*& pMap, int& magic)\n" % symbol2XOrdinalFunc)
            dllStub.write("{\n")
            dllStub.write("    magic = 0x23aaff42;\n")
            dllStub.write("    pMap = z_symbolTable;\n")
            dllStub.write("    return sizeof(z_symbolTable) / sizeof(SymbolEntry);\n")
            dllStub.write("}\n")
        else:
            dllStub.write("int %s(int reason)\n" % symbol2XOrdinalFunc)
            dllStub.write("{\n")
            dllStub.write("    if (reason == 1) \n")
            dllStub.write("    {\n")
            dllStub.write("    	HXGlobalManager* pGM = HXGlobalManager::Instance();\n")
            dllStub.write("    	if (pGM)\n")
            dllStub.write("    	{\n")
            dllStub.write("        		pGM->Shutdown();\n")
            dllStub.write("    	}\n")
            dllStub.write("    }\n")
            dllStub.write("    return(KErrNone);\n")
            dllStub.write("}\n")

        dllStub.close()

        # Add the stub to the source list
        project.AddSources(stubSourceName)


## Create a global instance to use.
project.PlatformDependentUtil = PlatformDependentUtils()
